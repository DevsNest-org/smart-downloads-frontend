{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file:///Users/sundayochuko/DevsNest/smart-downloads-frontend/src/app/api/youtube/download/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport ytdl from 'ytdl-core';\n\nexport const dynamic = 'force-dynamic';\nexport const runtime = 'nodejs';\n\nexport async function POST(request: Request) {\n  try {\n    const { url } = await request.json();\n\n    if (!url) {\n      return NextResponse.json({ error: 'No URL provided' }, { status: 400 });\n    }\n\n    // Validate YouTube URL\n    if (!ytdl.validateURL(url)) {\n      return NextResponse.json({ error: 'Invalid YouTube URL' }, { status: 400 });\n    }\n\n    // Get video info\n    const info = await ytdl.getInfo(url);\n    const videoFormat = ytdl.chooseFormat(info.formats, { quality: 'highest' });\n\n    // Create a readable stream\n    const stream = ytdl(url, { format: videoFormat });\n\n    // Convert stream to buffer\n    const chunks: Uint8Array[] = [];\n    for await (const chunk of stream) {\n      chunks.push(chunk);\n    }\n    const buffer = Buffer.concat(chunks);\n\n    // Return the video as a downloadable file\n    return new NextResponse(buffer, {\n      headers: {\n        'Content-Type': 'video/mp4',\n        'Content-Disposition': `attachment; filename=\"${info.videoDetails.title}.mp4\"`,\n      },\n    });\n  } catch (error) {\n    console.error('Error downloading video:', error);\n    return NextResponse.json(\n      { error: 'Failed to download video' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,MAAM,UAAU;AAChB,MAAM,UAAU;AAEhB,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,QAAQ,IAAI;QAElC,IAAI,CAAC,KAAK;YACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,uBAAuB;QACvB,IAAI,CAAC,8IAAA,CAAA,UAAI,CAAC,WAAW,CAAC,MAAM;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC3E;QAEA,iBAAiB;QACjB,MAAM,OAAO,MAAM,8IAAA,CAAA,UAAI,CAAC,OAAO,CAAC;QAChC,MAAM,cAAc,8IAAA,CAAA,UAAI,CAAC,YAAY,CAAC,KAAK,OAAO,EAAE;YAAE,SAAS;QAAU;QAEzE,2BAA2B;QAC3B,MAAM,SAAS,CAAA,GAAA,8IAAA,CAAA,UAAI,AAAD,EAAE,KAAK;YAAE,QAAQ;QAAY;QAE/C,2BAA2B;QAC3B,MAAM,SAAuB,EAAE;QAC/B,WAAW,MAAM,SAAS,OAAQ;YAChC,OAAO,IAAI,CAAC;QACd;QACA,MAAM,SAAS,OAAO,MAAM,CAAC;QAE7B,0CAA0C;QAC1C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,QAAQ;YAC9B,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB,CAAC,sBAAsB,EAAE,KAAK,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC;YAChF;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}